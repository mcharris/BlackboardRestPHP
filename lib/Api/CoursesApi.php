<?php
/**
 * CoursesApi
 * PHP version 5
 *
 * @category Class
 * @package  BlackboardRest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Learn APIs
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3200.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BlackboardRest\Api;

use \BlackboardRest\ApiClient;
use \BlackboardRest\ApiException;
use \BlackboardRest\Configuration;
use \BlackboardRest\ObjectSerializer;

/**
 * CoursesApi Class Doc Comment
 *
 * @category Class
 * @package  BlackboardRest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CoursesApi
{
    /**
     * API Client
     *
     * @var \BlackboardRest\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \BlackboardRest\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\BlackboardRest\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \BlackboardRest\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \BlackboardRest\ApiClient $apiClient set the API client
     *
     * @return CoursesApi
     */
    public function setApiClient(\BlackboardRest\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation coursesCourseIdChildrenChildCourseIdGet
     *
     * Get Child
     *
     * @param string $course_id The course or organization ID.  This may be the primary ID, or any of the secondary IDs prefixed with the ID type.    | ID type    | Example                               |  |------------|---------------------------------------|  | primary    | _123_1                                |  | externalId | externalId:math101                    |  | courseId   | courseId:math101                      |  | uuid       | uuid:915c7567d76d444abf1eed56aad3beb5 | (required)
     * @param string $child_course_id The course or organization ID.  This may be the primary ID, or any of the secondary IDs prefixed with the ID type.    | ID type    | Example                               |  |------------|---------------------------------------|  | primary    | _123_1                                |  | externalId | externalId:math101                    |  | courseId   | courseId:math101                      |  | uuid       | uuid:915c7567d76d444abf1eed56aad3beb5 | (required)
     * @param string $fields A comma-delimited list of fields to include in the response. If not specified, all fields will be returned. (optional)
     * @throws \BlackboardRest\ApiException on non-2xx response
     * @return \BlackboardRest\Model\CourseChild
     */
    public function coursesCourseIdChildrenChildCourseIdGet($course_id, $child_course_id, $fields = null)
    {
        list($response) = $this->coursesCourseIdChildrenChildCourseIdGetWithHttpInfo($course_id, $child_course_id, $fields);
        return $response;
    }

    /**
     * Operation coursesCourseIdChildrenChildCourseIdGetWithHttpInfo
     *
     * Get Child
     *
     * @param string $course_id The course or organization ID.  This may be the primary ID, or any of the secondary IDs prefixed with the ID type.    | ID type    | Example                               |  |------------|---------------------------------------|  | primary    | _123_1                                |  | externalId | externalId:math101                    |  | courseId   | courseId:math101                      |  | uuid       | uuid:915c7567d76d444abf1eed56aad3beb5 | (required)
     * @param string $child_course_id The course or organization ID.  This may be the primary ID, or any of the secondary IDs prefixed with the ID type.    | ID type    | Example                               |  |------------|---------------------------------------|  | primary    | _123_1                                |  | externalId | externalId:math101                    |  | courseId   | courseId:math101                      |  | uuid       | uuid:915c7567d76d444abf1eed56aad3beb5 | (required)
     * @param string $fields A comma-delimited list of fields to include in the response. If not specified, all fields will be returned. (optional)
     * @throws \BlackboardRest\ApiException on non-2xx response
     * @return array of \BlackboardRest\Model\CourseChild, HTTP status code, HTTP response headers (array of strings)
     */
    public function coursesCourseIdChildrenChildCourseIdGetWithHttpInfo($course_id, $child_course_id, $fields = null)
    {
        // verify the required parameter 'course_id' is set
        if ($course_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course_id when calling coursesCourseIdChildrenChildCourseIdGet');
        }
        // verify the required parameter 'child_course_id' is set
        if ($child_course_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $child_course_id when calling coursesCourseIdChildrenChildCourseIdGet');
        }
        // parse inputs
        $resourcePath = "courses/{courseId}/children/{childCourseId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        // path params
        if ($course_id !== null) {
            $resourcePath = str_replace(
                "{" . "courseId" . "}",
                $this->apiClient->getSerializer()->toPathValue($course_id),
                $resourcePath
            );
        }
        // path params
        if ($child_course_id !== null) {
            $resourcePath = str_replace(
                "{" . "childCourseId" . "}",
                $this->apiClient->getSerializer()->toPathValue($child_course_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BlackboardRest\Model\CourseChild',
                'courses/{courseId}/children/{childCourseId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BlackboardRest\Model\CourseChild', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BlackboardRest\Model\CourseChild', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BlackboardRest\Model\RestException', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BlackboardRest\Model\RestException', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coursesCourseIdChildrenGet
     *
     * Get Children
     *
     * @param string $course_id The course or organization ID.  This may be the primary ID, or any of the secondary IDs prefixed with the ID type.    | ID type    | Example                               |  |------------|---------------------------------------|  | primary    | _123_1                                |  | externalId | externalId:math101                    |  | courseId   | courseId:math101                      |  | uuid       | uuid:915c7567d76d444abf1eed56aad3beb5 | (required)
     * @param int $offset The number of rows to skip before beginning to return rows. An offset of 0 is the same as omitting the offset parameter. (optional)
     * @param int $limit The maximum number of results to be returned. There may be less if the query returned less than the maximum. (optional)
     * @param string $fields A comma-delimited list of fields to include in the response. If not specified, all fields will be returned. (optional)
     * @throws \BlackboardRest\ApiException on non-2xx response
     * @return \BlackboardRest\Model\InlineResponse2002
     */
    public function coursesCourseIdChildrenGet($course_id, $offset = null, $limit = null, $fields = null)
    {
        list($response) = $this->coursesCourseIdChildrenGetWithHttpInfo($course_id, $offset, $limit, $fields);
        return $response;
    }

    /**
     * Operation coursesCourseIdChildrenGetWithHttpInfo
     *
     * Get Children
     *
     * @param string $course_id The course or organization ID.  This may be the primary ID, or any of the secondary IDs prefixed with the ID type.    | ID type    | Example                               |  |------------|---------------------------------------|  | primary    | _123_1                                |  | externalId | externalId:math101                    |  | courseId   | courseId:math101                      |  | uuid       | uuid:915c7567d76d444abf1eed56aad3beb5 | (required)
     * @param int $offset The number of rows to skip before beginning to return rows. An offset of 0 is the same as omitting the offset parameter. (optional)
     * @param int $limit The maximum number of results to be returned. There may be less if the query returned less than the maximum. (optional)
     * @param string $fields A comma-delimited list of fields to include in the response. If not specified, all fields will be returned. (optional)
     * @throws \BlackboardRest\ApiException on non-2xx response
     * @return array of \BlackboardRest\Model\InlineResponse2002, HTTP status code, HTTP response headers (array of strings)
     */
    public function coursesCourseIdChildrenGetWithHttpInfo($course_id, $offset = null, $limit = null, $fields = null)
    {
        // verify the required parameter 'course_id' is set
        if ($course_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course_id when calling coursesCourseIdChildrenGet');
        }
        // parse inputs
        $resourcePath = "courses/{courseId}/children";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        // path params
        if ($course_id !== null) {
            $resourcePath = str_replace(
                "{" . "courseId" . "}",
                $this->apiClient->getSerializer()->toPathValue($course_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BlackboardRest\Model\InlineResponse2002',
                'courses/{courseId}/children'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BlackboardRest\Model\InlineResponse2002', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BlackboardRest\Model\InlineResponse2002', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BlackboardRest\Model\RestException', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BlackboardRest\Model\RestException', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coursesCourseIdDelete
     *
     * Delete Course
     *
     * @param string $course_id The course or organization ID.  This may be the primary ID, or any of the secondary IDs prefixed with the ID type.    | ID type    | Example                               |  |------------|---------------------------------------|  | primary    | _123_1                                |  | externalId | externalId:math101                    |  | courseId   | courseId:math101                      |  | uuid       | uuid:915c7567d76d444abf1eed56aad3beb5 | (required)
     * @param bool $remove_files Whether to delete course files.  Defaults to true. (optional)
     * @throws \BlackboardRest\ApiException on non-2xx response
     * @return void
     */
    public function coursesCourseIdDelete($course_id, $remove_files = null)
    {
        list($response) = $this->coursesCourseIdDeleteWithHttpInfo($course_id, $remove_files);
        return $response;
    }

    /**
     * Operation coursesCourseIdDeleteWithHttpInfo
     *
     * Delete Course
     *
     * @param string $course_id The course or organization ID.  This may be the primary ID, or any of the secondary IDs prefixed with the ID type.    | ID type    | Example                               |  |------------|---------------------------------------|  | primary    | _123_1                                |  | externalId | externalId:math101                    |  | courseId   | courseId:math101                      |  | uuid       | uuid:915c7567d76d444abf1eed56aad3beb5 | (required)
     * @param bool $remove_files Whether to delete course files.  Defaults to true. (optional)
     * @throws \BlackboardRest\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function coursesCourseIdDeleteWithHttpInfo($course_id, $remove_files = null)
    {
        // verify the required parameter 'course_id' is set
        if ($course_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course_id when calling coursesCourseIdDelete');
        }
        // parse inputs
        $resourcePath = "courses/{courseId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($remove_files !== null) {
            $queryParams['removeFiles'] = $this->apiClient->getSerializer()->toQueryValue($remove_files);
        }
        // path params
        if ($course_id !== null) {
            $resourcePath = str_replace(
                "{" . "courseId" . "}",
                $this->apiClient->getSerializer()->toPathValue($course_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                'courses/{courseId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BlackboardRest\Model\RestException', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BlackboardRest\Model\RestException', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BlackboardRest\Model\RestException', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coursesCourseIdGet
     *
     * Get Course
     *
     * @param string $course_id The course or organization ID.  This may be the primary ID, or any of the secondary IDs prefixed with the ID type.    | ID type    | Example                               |  |------------|---------------------------------------|  | primary    | _123_1                                |  | externalId | externalId:math101                    |  | courseId   | courseId:math101                      |  | uuid       | uuid:915c7567d76d444abf1eed56aad3beb5 | (required)
     * @param string $fields A comma-delimited list of fields to include in the response. If not specified, all fields will be returned. (optional)
     * @throws \BlackboardRest\ApiException on non-2xx response
     * @return \BlackboardRest\Model\Course
     */
    public function coursesCourseIdGet($course_id, $fields = null)
    {
        list($response) = $this->coursesCourseIdGetWithHttpInfo($course_id, $fields);
        return $response;
    }

    /**
     * Operation coursesCourseIdGetWithHttpInfo
     *
     * Get Course
     *
     * @param string $course_id The course or organization ID.  This may be the primary ID, or any of the secondary IDs prefixed with the ID type.    | ID type    | Example                               |  |------------|---------------------------------------|  | primary    | _123_1                                |  | externalId | externalId:math101                    |  | courseId   | courseId:math101                      |  | uuid       | uuid:915c7567d76d444abf1eed56aad3beb5 | (required)
     * @param string $fields A comma-delimited list of fields to include in the response. If not specified, all fields will be returned. (optional)
     * @throws \BlackboardRest\ApiException on non-2xx response
     * @return array of \BlackboardRest\Model\Course, HTTP status code, HTTP response headers (array of strings)
     */
    public function coursesCourseIdGetWithHttpInfo($course_id, $fields = null)
    {
        // verify the required parameter 'course_id' is set
        if ($course_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course_id when calling coursesCourseIdGet');
        }
        // parse inputs
        $resourcePath = "courses/{courseId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        // path params
        if ($course_id !== null) {
            $resourcePath = str_replace(
                "{" . "courseId" . "}",
                $this->apiClient->getSerializer()->toPathValue($course_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BlackboardRest\Model\Course',
                'courses/{courseId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BlackboardRest\Model\Course', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BlackboardRest\Model\Course', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BlackboardRest\Model\RestException', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BlackboardRest\Model\RestException', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coursesCourseIdPatch
     *
     * Update Course
     *
     * @param string $course_id The course or organization ID.  This may be the primary ID, or any of the secondary IDs prefixed with the ID type.    | ID type    | Example                               |  |------------|---------------------------------------|  | primary    | _123_1                                |  | externalId | externalId:math101                    |  | courseId   | courseId:math101                      |  | uuid       | uuid:915c7567d76d444abf1eed56aad3beb5 | (required)
     * @param \BlackboardRest\Model\Input3 $input JSON input object. (required)
     * @param string $fields A comma-delimited list of fields to include in the response. If not specified, all fields will be returned. (optional)
     * @throws \BlackboardRest\ApiException on non-2xx response
     * @return \BlackboardRest\Model\Course
     */
    public function coursesCourseIdPatch($course_id, $input, $fields = null)
    {
        list($response) = $this->coursesCourseIdPatchWithHttpInfo($course_id, $input, $fields);
        return $response;
    }

    /**
     * Operation coursesCourseIdPatchWithHttpInfo
     *
     * Update Course
     *
     * @param string $course_id The course or organization ID.  This may be the primary ID, or any of the secondary IDs prefixed with the ID type.    | ID type    | Example                               |  |------------|---------------------------------------|  | primary    | _123_1                                |  | externalId | externalId:math101                    |  | courseId   | courseId:math101                      |  | uuid       | uuid:915c7567d76d444abf1eed56aad3beb5 | (required)
     * @param \BlackboardRest\Model\Input3 $input JSON input object. (required)
     * @param string $fields A comma-delimited list of fields to include in the response. If not specified, all fields will be returned. (optional)
     * @throws \BlackboardRest\ApiException on non-2xx response
     * @return array of \BlackboardRest\Model\Course, HTTP status code, HTTP response headers (array of strings)
     */
    public function coursesCourseIdPatchWithHttpInfo($course_id, $input, $fields = null)
    {
        // verify the required parameter 'course_id' is set
        if ($course_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course_id when calling coursesCourseIdPatch');
        }
        // verify the required parameter 'input' is set
        if ($input === null) {
            throw new \InvalidArgumentException('Missing the required parameter $input when calling coursesCourseIdPatch');
        }
        // parse inputs
        $resourcePath = "courses/{courseId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        // path params
        if ($course_id !== null) {
            $resourcePath = str_replace(
                "{" . "courseId" . "}",
                $this->apiClient->getSerializer()->toPathValue($course_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($input)) {
            $_tempBody = $input;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BlackboardRest\Model\Course',
                'courses/{courseId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BlackboardRest\Model\Course', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BlackboardRest\Model\Course', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BlackboardRest\Model\RestException', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BlackboardRest\Model\RestException', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BlackboardRest\Model\RestException', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BlackboardRest\Model\RestException', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coursesGet
     *
     * Get Courses
     *
     * @param int $offset The number of rows to skip before beginning to return rows. An offset of 0 is the same as omitting the offset parameter. (optional)
     * @param int $limit The maximum number of results to be returned. There may be less if the query returned less than the maximum. (optional)
     * @param string $course_id Search for courses with courseId properties that contain this value.  **Since**: 3100.0.0 (optional)
     * @param string $name Search for courses with name properties that contain this value.  **Since**: 3100.0.0 (optional)
     * @param string $description Search for courses with description properties that contain this value.  **Since**: 3100.0.0 (optional)
     * @param string $external_id Search for courses with externalId properties that contain this value.  **Since**: 3100.0.0 (optional)
     * @param \DateTime $created Search for courses with a created date relative to this value.  &#39;createdCompare&#39; may also be sent to control search behavior.  **Since**: 3100.0.0 (optional)
     * @param string $created_compare Used alongside the &#39;created&#39; search parameter.  Supported values:  - lessThan - greaterOrEqual  Defaults to greaterOrEqual if not specified.  **Since**: 3100.0.0 (optional)
     * @param string $data_source_id Search for courses with this dataSourceId.  This may optionally be the data source&#39;s externalId using the syntax \&quot;externalId:math101\&quot;.  **Since**: 3100.0.0 (optional)
     * @param string $term_id Search for courses with this termId.  This may optionally be the term&#39;s externalId using the syntax \&quot;externalId:spring2015\&quot;.  **Since**: 3100.0.0 (optional)
     * @param bool $organization Search for courses by organization flag.  A value of &#39;true&#39; indicates that search results should be limited to only Organizations.  A value of &#39;false&#39; indicates results should be limited to Courses.  Not setting this field indicates that both Courses and Organizations should be returned.  **Since**: 3100.0.0 (optional)
     * @param string $sort Properties to sort by. This is a comma-delimited list of JSON properties, with an optional \&quot;(desc)\&quot; suffix to request a descending sort for that property. e.g. \&quot;name.family(desc),created\&quot;  **Since**: 3100.0.0 (optional)
     * @param string $fields A comma-delimited list of fields to include in the response. If not specified, all fields will be returned. (optional)
     * @throws \BlackboardRest\ApiException on non-2xx response
     * @return \BlackboardRest\Model\InlineResponse2001
     */
    public function coursesGet($offset = null, $limit = null, $course_id = null, $name = null, $description = null, $external_id = null, $created = null, $created_compare = null, $data_source_id = null, $term_id = null, $organization = null, $sort = null, $fields = null)
    {
        list($response) = $this->coursesGetWithHttpInfo($offset, $limit, $course_id, $name, $description, $external_id, $created, $created_compare, $data_source_id, $term_id, $organization, $sort, $fields);
        return $response;
    }

    /**
     * Operation coursesGetWithHttpInfo
     *
     * Get Courses
     *
     * @param int $offset The number of rows to skip before beginning to return rows. An offset of 0 is the same as omitting the offset parameter. (optional)
     * @param int $limit The maximum number of results to be returned. There may be less if the query returned less than the maximum. (optional)
     * @param string $course_id Search for courses with courseId properties that contain this value.  **Since**: 3100.0.0 (optional)
     * @param string $name Search for courses with name properties that contain this value.  **Since**: 3100.0.0 (optional)
     * @param string $description Search for courses with description properties that contain this value.  **Since**: 3100.0.0 (optional)
     * @param string $external_id Search for courses with externalId properties that contain this value.  **Since**: 3100.0.0 (optional)
     * @param \DateTime $created Search for courses with a created date relative to this value.  &#39;createdCompare&#39; may also be sent to control search behavior.  **Since**: 3100.0.0 (optional)
     * @param string $created_compare Used alongside the &#39;created&#39; search parameter.  Supported values:  - lessThan - greaterOrEqual  Defaults to greaterOrEqual if not specified.  **Since**: 3100.0.0 (optional)
     * @param string $data_source_id Search for courses with this dataSourceId.  This may optionally be the data source&#39;s externalId using the syntax \&quot;externalId:math101\&quot;.  **Since**: 3100.0.0 (optional)
     * @param string $term_id Search for courses with this termId.  This may optionally be the term&#39;s externalId using the syntax \&quot;externalId:spring2015\&quot;.  **Since**: 3100.0.0 (optional)
     * @param bool $organization Search for courses by organization flag.  A value of &#39;true&#39; indicates that search results should be limited to only Organizations.  A value of &#39;false&#39; indicates results should be limited to Courses.  Not setting this field indicates that both Courses and Organizations should be returned.  **Since**: 3100.0.0 (optional)
     * @param string $sort Properties to sort by. This is a comma-delimited list of JSON properties, with an optional \&quot;(desc)\&quot; suffix to request a descending sort for that property. e.g. \&quot;name.family(desc),created\&quot;  **Since**: 3100.0.0 (optional)
     * @param string $fields A comma-delimited list of fields to include in the response. If not specified, all fields will be returned. (optional)
     * @throws \BlackboardRest\ApiException on non-2xx response
     * @return array of \BlackboardRest\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function coursesGetWithHttpInfo($offset = null, $limit = null, $course_id = null, $name = null, $description = null, $external_id = null, $created = null, $created_compare = null, $data_source_id = null, $term_id = null, $organization = null, $sort = null, $fields = null)
    {
        // parse inputs
        $resourcePath = "courses";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($course_id !== null) {
            $queryParams['courseId'] = $this->apiClient->getSerializer()->toQueryValue($course_id);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // query params
        if ($description !== null) {
            $queryParams['description'] = $this->apiClient->getSerializer()->toQueryValue($description);
        }
        // query params
        if ($external_id !== null) {
            $queryParams['externalId'] = $this->apiClient->getSerializer()->toQueryValue($external_id);
        }
        // query params
        if ($created !== null) {
            $queryParams['created'] = $this->apiClient->getSerializer()->toQueryValue($created);
        }
        // query params
        if ($created_compare !== null) {
            $queryParams['createdCompare'] = $this->apiClient->getSerializer()->toQueryValue($created_compare);
        }
        // query params
        if ($data_source_id !== null) {
            $queryParams['dataSourceId'] = $this->apiClient->getSerializer()->toQueryValue($data_source_id);
        }
        // query params
        if ($term_id !== null) {
            $queryParams['termId'] = $this->apiClient->getSerializer()->toQueryValue($term_id);
        }
        // query params
        if ($organization !== null) {
            $queryParams['organization'] = $this->apiClient->getSerializer()->toQueryValue($organization);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BlackboardRest\Model\InlineResponse2001',
                'courses'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BlackboardRest\Model\InlineResponse2001', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BlackboardRest\Model\InlineResponse2001', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BlackboardRest\Model\RestException', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coursesPost
     *
     * Create Course
     *
     * @param \BlackboardRest\Model\Input2 $input JSON input object. (required)
     * @param string $fields A comma-delimited list of fields to include in the response. If not specified, all fields will be returned. (optional)
     * @throws \BlackboardRest\ApiException on non-2xx response
     * @return \BlackboardRest\Model\Course
     */
    public function coursesPost($input, $fields = null)
    {
        list($response) = $this->coursesPostWithHttpInfo($input, $fields);
        return $response;
    }

    /**
     * Operation coursesPostWithHttpInfo
     *
     * Create Course
     *
     * @param \BlackboardRest\Model\Input2 $input JSON input object. (required)
     * @param string $fields A comma-delimited list of fields to include in the response. If not specified, all fields will be returned. (optional)
     * @throws \BlackboardRest\ApiException on non-2xx response
     * @return array of \BlackboardRest\Model\Course, HTTP status code, HTTP response headers (array of strings)
     */
    public function coursesPostWithHttpInfo($input, $fields = null)
    {
        // verify the required parameter 'input' is set
        if ($input === null) {
            throw new \InvalidArgumentException('Missing the required parameter $input when calling coursesPost');
        }
        // parse inputs
        $resourcePath = "courses";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($input)) {
            $_tempBody = $input;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BlackboardRest\Model\Course',
                'courses'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BlackboardRest\Model\Course', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BlackboardRest\Model\Course', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BlackboardRest\Model\RestException', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BlackboardRest\Model\RestException', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BlackboardRest\Model\RestException', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
