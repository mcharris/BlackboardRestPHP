<?php
/**
 * ContentApi
 * PHP version 5
 *
 * @category Class
 * @package  BlackboardRest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Learn APIs
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3200.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BlackboardRest\Api;

use \BlackboardRest\ApiClient;
use \BlackboardRest\ApiException;
use \BlackboardRest\Configuration;
use \BlackboardRest\ObjectSerializer;

/**
 * ContentApi Class Doc Comment
 *
 * @category Class
 * @package  BlackboardRest
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ContentApi
{
    /**
     * API Client
     *
     * @var \BlackboardRest\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \BlackboardRest\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\BlackboardRest\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \BlackboardRest\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \BlackboardRest\ApiClient $apiClient set the API client
     *
     * @return ContentApi
     */
    public function setApiClient(\BlackboardRest\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation coursesCourseIdContentsContentIdChildrenGet
     *
     * Get Children
     *
     * @param string $course_id The course or organization ID.  This may be the primary ID, or any of the secondary IDs prefixed with the ID type.    | ID type    | Example                               |  |------------|---------------------------------------|  | primary    | _123_1                                |  | externalId | externalId:math101                    |  | courseId   | courseId:math101                      |  | uuid       | uuid:915c7567d76d444abf1eed56aad3beb5 | (required)
     * @param string $content_id  (required)
     * @param int $offset The number of rows to skip before beginning to return rows. An offset of 0 is the same as omitting the offset parameter. (optional)
     * @param int $limit The maximum number of results to be returned. There may be less if the query returned less than the maximum. (optional)
     * @param bool $recursive Search for child content recursively.  A value of &#39;true&#39; indicates that search results should include all content descendants within the hierarchy of the specified parent.  A value of &#39;false&#39; indicates results should be limited to immediate children only.  Not setting this field defaults to &#39;false&#39; behavior; only including immediate children.  **Since**: 3100.2.0 (optional)
     * @param string $fields A comma-delimited list of fields to include in the response. If not specified, all fields will be returned. (optional)
     * @throws \BlackboardRest\ApiException on non-2xx response
     * @return \BlackboardRest\Model\InlineResponse2003
     */
    public function coursesCourseIdContentsContentIdChildrenGet($course_id, $content_id, $offset = null, $limit = null, $recursive = null, $fields = null)
    {
        list($response) = $this->coursesCourseIdContentsContentIdChildrenGetWithHttpInfo($course_id, $content_id, $offset, $limit, $recursive, $fields);
        return $response;
    }

    /**
     * Operation coursesCourseIdContentsContentIdChildrenGetWithHttpInfo
     *
     * Get Children
     *
     * @param string $course_id The course or organization ID.  This may be the primary ID, or any of the secondary IDs prefixed with the ID type.    | ID type    | Example                               |  |------------|---------------------------------------|  | primary    | _123_1                                |  | externalId | externalId:math101                    |  | courseId   | courseId:math101                      |  | uuid       | uuid:915c7567d76d444abf1eed56aad3beb5 | (required)
     * @param string $content_id  (required)
     * @param int $offset The number of rows to skip before beginning to return rows. An offset of 0 is the same as omitting the offset parameter. (optional)
     * @param int $limit The maximum number of results to be returned. There may be less if the query returned less than the maximum. (optional)
     * @param bool $recursive Search for child content recursively.  A value of &#39;true&#39; indicates that search results should include all content descendants within the hierarchy of the specified parent.  A value of &#39;false&#39; indicates results should be limited to immediate children only.  Not setting this field defaults to &#39;false&#39; behavior; only including immediate children.  **Since**: 3100.2.0 (optional)
     * @param string $fields A comma-delimited list of fields to include in the response. If not specified, all fields will be returned. (optional)
     * @throws \BlackboardRest\ApiException on non-2xx response
     * @return array of \BlackboardRest\Model\InlineResponse2003, HTTP status code, HTTP response headers (array of strings)
     */
    public function coursesCourseIdContentsContentIdChildrenGetWithHttpInfo($course_id, $content_id, $offset = null, $limit = null, $recursive = null, $fields = null)
    {
        // verify the required parameter 'course_id' is set
        if ($course_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course_id when calling coursesCourseIdContentsContentIdChildrenGet');
        }
        // verify the required parameter 'content_id' is set
        if ($content_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $content_id when calling coursesCourseIdContentsContentIdChildrenGet');
        }
        // parse inputs
        $resourcePath = "courses/{courseId}/contents/{contentId}/children";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($recursive !== null) {
            $queryParams['recursive'] = $this->apiClient->getSerializer()->toQueryValue($recursive);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        // path params
        if ($course_id !== null) {
            $resourcePath = str_replace(
                "{" . "courseId" . "}",
                $this->apiClient->getSerializer()->toPathValue($course_id),
                $resourcePath
            );
        }
        // path params
        if ($content_id !== null) {
            $resourcePath = str_replace(
                "{" . "contentId" . "}",
                $this->apiClient->getSerializer()->toPathValue($content_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BlackboardRest\Model\InlineResponse2003',
                'courses/{courseId}/contents/{contentId}/children'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BlackboardRest\Model\InlineResponse2003', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BlackboardRest\Model\InlineResponse2003', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BlackboardRest\Model\RestException', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BlackboardRest\Model\RestException', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BlackboardRest\Model\RestException', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coursesCourseIdContentsContentIdChildrenPost
     *
     * Create Child
     *
     * @param string $course_id The course or organization ID.  This may be the primary ID, or any of the secondary IDs prefixed with the ID type.    | ID type    | Example                               |  |------------|---------------------------------------|  | primary    | _123_1                                |  | externalId | externalId:math101                    |  | courseId   | courseId:math101                      |  | uuid       | uuid:915c7567d76d444abf1eed56aad3beb5 | (required)
     * @param string $content_id  (required)
     * @param \BlackboardRest\Model\Input6 $input  (required)
     * @param string $fields A comma-delimited list of fields to include in the response. If not specified, all fields will be returned. (optional)
     * @throws \BlackboardRest\ApiException on non-2xx response
     * @return \BlackboardRest\Model\Content
     */
    public function coursesCourseIdContentsContentIdChildrenPost($course_id, $content_id, $input, $fields = null)
    {
        list($response) = $this->coursesCourseIdContentsContentIdChildrenPostWithHttpInfo($course_id, $content_id, $input, $fields);
        return $response;
    }

    /**
     * Operation coursesCourseIdContentsContentIdChildrenPostWithHttpInfo
     *
     * Create Child
     *
     * @param string $course_id The course or organization ID.  This may be the primary ID, or any of the secondary IDs prefixed with the ID type.    | ID type    | Example                               |  |------------|---------------------------------------|  | primary    | _123_1                                |  | externalId | externalId:math101                    |  | courseId   | courseId:math101                      |  | uuid       | uuid:915c7567d76d444abf1eed56aad3beb5 | (required)
     * @param string $content_id  (required)
     * @param \BlackboardRest\Model\Input6 $input  (required)
     * @param string $fields A comma-delimited list of fields to include in the response. If not specified, all fields will be returned. (optional)
     * @throws \BlackboardRest\ApiException on non-2xx response
     * @return array of \BlackboardRest\Model\Content, HTTP status code, HTTP response headers (array of strings)
     */
    public function coursesCourseIdContentsContentIdChildrenPostWithHttpInfo($course_id, $content_id, $input, $fields = null)
    {
        // verify the required parameter 'course_id' is set
        if ($course_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course_id when calling coursesCourseIdContentsContentIdChildrenPost');
        }
        // verify the required parameter 'content_id' is set
        if ($content_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $content_id when calling coursesCourseIdContentsContentIdChildrenPost');
        }
        // verify the required parameter 'input' is set
        if ($input === null) {
            throw new \InvalidArgumentException('Missing the required parameter $input when calling coursesCourseIdContentsContentIdChildrenPost');
        }
        // parse inputs
        $resourcePath = "courses/{courseId}/contents/{contentId}/children";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        // path params
        if ($course_id !== null) {
            $resourcePath = str_replace(
                "{" . "courseId" . "}",
                $this->apiClient->getSerializer()->toPathValue($course_id),
                $resourcePath
            );
        }
        // path params
        if ($content_id !== null) {
            $resourcePath = str_replace(
                "{" . "contentId" . "}",
                $this->apiClient->getSerializer()->toPathValue($content_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($input)) {
            $_tempBody = $input;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BlackboardRest\Model\Content',
                'courses/{courseId}/contents/{contentId}/children'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BlackboardRest\Model\Content', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BlackboardRest\Model\Content', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BlackboardRest\Model\RestException', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BlackboardRest\Model\RestException', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coursesCourseIdContentsContentIdDelete
     *
     * Delete Content
     *
     * @param string $course_id The course or organization ID.  This may be the primary ID, or any of the secondary IDs prefixed with the ID type.    | ID type    | Example                               |  |------------|---------------------------------------|  | primary    | _123_1                                |  | externalId | externalId:math101                    |  | courseId   | courseId:math101                      |  | uuid       | uuid:915c7567d76d444abf1eed56aad3beb5 | (required)
     * @param string $content_id  (required)
     * @throws \BlackboardRest\ApiException on non-2xx response
     * @return void
     */
    public function coursesCourseIdContentsContentIdDelete($course_id, $content_id)
    {
        list($response) = $this->coursesCourseIdContentsContentIdDeleteWithHttpInfo($course_id, $content_id);
        return $response;
    }

    /**
     * Operation coursesCourseIdContentsContentIdDeleteWithHttpInfo
     *
     * Delete Content
     *
     * @param string $course_id The course or organization ID.  This may be the primary ID, or any of the secondary IDs prefixed with the ID type.    | ID type    | Example                               |  |------------|---------------------------------------|  | primary    | _123_1                                |  | externalId | externalId:math101                    |  | courseId   | courseId:math101                      |  | uuid       | uuid:915c7567d76d444abf1eed56aad3beb5 | (required)
     * @param string $content_id  (required)
     * @throws \BlackboardRest\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function coursesCourseIdContentsContentIdDeleteWithHttpInfo($course_id, $content_id)
    {
        // verify the required parameter 'course_id' is set
        if ($course_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course_id when calling coursesCourseIdContentsContentIdDelete');
        }
        // verify the required parameter 'content_id' is set
        if ($content_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $content_id when calling coursesCourseIdContentsContentIdDelete');
        }
        // parse inputs
        $resourcePath = "courses/{courseId}/contents/{contentId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($course_id !== null) {
            $resourcePath = str_replace(
                "{" . "courseId" . "}",
                $this->apiClient->getSerializer()->toPathValue($course_id),
                $resourcePath
            );
        }
        // path params
        if ($content_id !== null) {
            $resourcePath = str_replace(
                "{" . "contentId" . "}",
                $this->apiClient->getSerializer()->toPathValue($content_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                'courses/{courseId}/contents/{contentId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BlackboardRest\Model\RestException', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BlackboardRest\Model\RestException', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BlackboardRest\Model\RestException', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coursesCourseIdContentsContentIdGet
     *
     * Get Content
     *
     * @param string $course_id The course or organization ID.  This may be the primary ID, or any of the secondary IDs prefixed with the ID type.    | ID type    | Example                               |  |------------|---------------------------------------|  | primary    | _123_1                                |  | externalId | externalId:math101                    |  | courseId   | courseId:math101                      |  | uuid       | uuid:915c7567d76d444abf1eed56aad3beb5 | (required)
     * @param string $content_id  (required)
     * @param string $fields A comma-delimited list of fields to include in the response. If not specified, all fields will be returned. (optional)
     * @throws \BlackboardRest\ApiException on non-2xx response
     * @return \BlackboardRest\Model\Content
     */
    public function coursesCourseIdContentsContentIdGet($course_id, $content_id, $fields = null)
    {
        list($response) = $this->coursesCourseIdContentsContentIdGetWithHttpInfo($course_id, $content_id, $fields);
        return $response;
    }

    /**
     * Operation coursesCourseIdContentsContentIdGetWithHttpInfo
     *
     * Get Content
     *
     * @param string $course_id The course or organization ID.  This may be the primary ID, or any of the secondary IDs prefixed with the ID type.    | ID type    | Example                               |  |------------|---------------------------------------|  | primary    | _123_1                                |  | externalId | externalId:math101                    |  | courseId   | courseId:math101                      |  | uuid       | uuid:915c7567d76d444abf1eed56aad3beb5 | (required)
     * @param string $content_id  (required)
     * @param string $fields A comma-delimited list of fields to include in the response. If not specified, all fields will be returned. (optional)
     * @throws \BlackboardRest\ApiException on non-2xx response
     * @return array of \BlackboardRest\Model\Content, HTTP status code, HTTP response headers (array of strings)
     */
    public function coursesCourseIdContentsContentIdGetWithHttpInfo($course_id, $content_id, $fields = null)
    {
        // verify the required parameter 'course_id' is set
        if ($course_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course_id when calling coursesCourseIdContentsContentIdGet');
        }
        // verify the required parameter 'content_id' is set
        if ($content_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $content_id when calling coursesCourseIdContentsContentIdGet');
        }
        // parse inputs
        $resourcePath = "courses/{courseId}/contents/{contentId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        // path params
        if ($course_id !== null) {
            $resourcePath = str_replace(
                "{" . "courseId" . "}",
                $this->apiClient->getSerializer()->toPathValue($course_id),
                $resourcePath
            );
        }
        // path params
        if ($content_id !== null) {
            $resourcePath = str_replace(
                "{" . "contentId" . "}",
                $this->apiClient->getSerializer()->toPathValue($content_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BlackboardRest\Model\Content',
                'courses/{courseId}/contents/{contentId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BlackboardRest\Model\Content', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BlackboardRest\Model\Content', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BlackboardRest\Model\RestException', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BlackboardRest\Model\RestException', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BlackboardRest\Model\RestException', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coursesCourseIdContentsContentIdPatch
     *
     * Update Content
     *
     * @param string $course_id The course or organization ID.  This may be the primary ID, or any of the secondary IDs prefixed with the ID type.    | ID type    | Example                               |  |------------|---------------------------------------|  | primary    | _123_1                                |  | externalId | externalId:math101                    |  | courseId   | courseId:math101                      |  | uuid       | uuid:915c7567d76d444abf1eed56aad3beb5 | (required)
     * @param string $content_id  (required)
     * @param \BlackboardRest\Model\Input5 $input  (required)
     * @param string $fields A comma-delimited list of fields to include in the response. If not specified, all fields will be returned. (optional)
     * @throws \BlackboardRest\ApiException on non-2xx response
     * @return \BlackboardRest\Model\Content
     */
    public function coursesCourseIdContentsContentIdPatch($course_id, $content_id, $input, $fields = null)
    {
        list($response) = $this->coursesCourseIdContentsContentIdPatchWithHttpInfo($course_id, $content_id, $input, $fields);
        return $response;
    }

    /**
     * Operation coursesCourseIdContentsContentIdPatchWithHttpInfo
     *
     * Update Content
     *
     * @param string $course_id The course or organization ID.  This may be the primary ID, or any of the secondary IDs prefixed with the ID type.    | ID type    | Example                               |  |------------|---------------------------------------|  | primary    | _123_1                                |  | externalId | externalId:math101                    |  | courseId   | courseId:math101                      |  | uuid       | uuid:915c7567d76d444abf1eed56aad3beb5 | (required)
     * @param string $content_id  (required)
     * @param \BlackboardRest\Model\Input5 $input  (required)
     * @param string $fields A comma-delimited list of fields to include in the response. If not specified, all fields will be returned. (optional)
     * @throws \BlackboardRest\ApiException on non-2xx response
     * @return array of \BlackboardRest\Model\Content, HTTP status code, HTTP response headers (array of strings)
     */
    public function coursesCourseIdContentsContentIdPatchWithHttpInfo($course_id, $content_id, $input, $fields = null)
    {
        // verify the required parameter 'course_id' is set
        if ($course_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course_id when calling coursesCourseIdContentsContentIdPatch');
        }
        // verify the required parameter 'content_id' is set
        if ($content_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $content_id when calling coursesCourseIdContentsContentIdPatch');
        }
        // verify the required parameter 'input' is set
        if ($input === null) {
            throw new \InvalidArgumentException('Missing the required parameter $input when calling coursesCourseIdContentsContentIdPatch');
        }
        // parse inputs
        $resourcePath = "courses/{courseId}/contents/{contentId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        // path params
        if ($course_id !== null) {
            $resourcePath = str_replace(
                "{" . "courseId" . "}",
                $this->apiClient->getSerializer()->toPathValue($course_id),
                $resourcePath
            );
        }
        // path params
        if ($content_id !== null) {
            $resourcePath = str_replace(
                "{" . "contentId" . "}",
                $this->apiClient->getSerializer()->toPathValue($content_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($input)) {
            $_tempBody = $input;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BlackboardRest\Model\Content',
                'courses/{courseId}/contents/{contentId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BlackboardRest\Model\Content', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BlackboardRest\Model\Content', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BlackboardRest\Model\RestException', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BlackboardRest\Model\RestException', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BlackboardRest\Model\RestException', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coursesCourseIdContentsGet
     *
     * Get Contents
     *
     * @param string $course_id The course or organization ID.  This may be the primary ID, or any of the secondary IDs prefixed with the ID type.    | ID type    | Example                               |  |------------|---------------------------------------|  | primary    | _123_1                                |  | externalId | externalId:math101                    |  | courseId   | courseId:math101                      |  | uuid       | uuid:915c7567d76d444abf1eed56aad3beb5 | (required)
     * @param int $offset The number of rows to skip before beginning to return rows. An offset of 0 is the same as omitting the offset parameter. (optional)
     * @param int $limit The maximum number of results to be returned. There may be less if the query returned less than the maximum. (optional)
     * @param string $fields A comma-delimited list of fields to include in the response. If not specified, all fields will be returned. (optional)
     * @throws \BlackboardRest\ApiException on non-2xx response
     * @return \BlackboardRest\Model\InlineResponse2003
     */
    public function coursesCourseIdContentsGet($course_id, $offset = null, $limit = null, $fields = null)
    {
        list($response) = $this->coursesCourseIdContentsGetWithHttpInfo($course_id, $offset, $limit, $fields);
        return $response;
    }

    /**
     * Operation coursesCourseIdContentsGetWithHttpInfo
     *
     * Get Contents
     *
     * @param string $course_id The course or organization ID.  This may be the primary ID, or any of the secondary IDs prefixed with the ID type.    | ID type    | Example                               |  |------------|---------------------------------------|  | primary    | _123_1                                |  | externalId | externalId:math101                    |  | courseId   | courseId:math101                      |  | uuid       | uuid:915c7567d76d444abf1eed56aad3beb5 | (required)
     * @param int $offset The number of rows to skip before beginning to return rows. An offset of 0 is the same as omitting the offset parameter. (optional)
     * @param int $limit The maximum number of results to be returned. There may be less if the query returned less than the maximum. (optional)
     * @param string $fields A comma-delimited list of fields to include in the response. If not specified, all fields will be returned. (optional)
     * @throws \BlackboardRest\ApiException on non-2xx response
     * @return array of \BlackboardRest\Model\InlineResponse2003, HTTP status code, HTTP response headers (array of strings)
     */
    public function coursesCourseIdContentsGetWithHttpInfo($course_id, $offset = null, $limit = null, $fields = null)
    {
        // verify the required parameter 'course_id' is set
        if ($course_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course_id when calling coursesCourseIdContentsGet');
        }
        // parse inputs
        $resourcePath = "courses/{courseId}/contents";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        // path params
        if ($course_id !== null) {
            $resourcePath = str_replace(
                "{" . "courseId" . "}",
                $this->apiClient->getSerializer()->toPathValue($course_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BlackboardRest\Model\InlineResponse2003',
                'courses/{courseId}/contents'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BlackboardRest\Model\InlineResponse2003', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BlackboardRest\Model\InlineResponse2003', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BlackboardRest\Model\RestException', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BlackboardRest\Model\RestException', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coursesCourseIdContentsPost
     *
     * Create Content
     *
     * @param string $course_id The course or organization ID.  This may be the primary ID, or any of the secondary IDs prefixed with the ID type.    | ID type    | Example                               |  |------------|---------------------------------------|  | primary    | _123_1                                |  | externalId | externalId:math101                    |  | courseId   | courseId:math101                      |  | uuid       | uuid:915c7567d76d444abf1eed56aad3beb5 | (required)
     * @param \BlackboardRest\Model\Input4 $input  (required)
     * @param string $fields A comma-delimited list of fields to include in the response. If not specified, all fields will be returned. (optional)
     * @throws \BlackboardRest\ApiException on non-2xx response
     * @return \BlackboardRest\Model\Content
     */
    public function coursesCourseIdContentsPost($course_id, $input, $fields = null)
    {
        list($response) = $this->coursesCourseIdContentsPostWithHttpInfo($course_id, $input, $fields);
        return $response;
    }

    /**
     * Operation coursesCourseIdContentsPostWithHttpInfo
     *
     * Create Content
     *
     * @param string $course_id The course or organization ID.  This may be the primary ID, or any of the secondary IDs prefixed with the ID type.    | ID type    | Example                               |  |------------|---------------------------------------|  | primary    | _123_1                                |  | externalId | externalId:math101                    |  | courseId   | courseId:math101                      |  | uuid       | uuid:915c7567d76d444abf1eed56aad3beb5 | (required)
     * @param \BlackboardRest\Model\Input4 $input  (required)
     * @param string $fields A comma-delimited list of fields to include in the response. If not specified, all fields will be returned. (optional)
     * @throws \BlackboardRest\ApiException on non-2xx response
     * @return array of \BlackboardRest\Model\Content, HTTP status code, HTTP response headers (array of strings)
     */
    public function coursesCourseIdContentsPostWithHttpInfo($course_id, $input, $fields = null)
    {
        // verify the required parameter 'course_id' is set
        if ($course_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course_id when calling coursesCourseIdContentsPost');
        }
        // verify the required parameter 'input' is set
        if ($input === null) {
            throw new \InvalidArgumentException('Missing the required parameter $input when calling coursesCourseIdContentsPost');
        }
        // parse inputs
        $resourcePath = "courses/{courseId}/contents";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        // path params
        if ($course_id !== null) {
            $resourcePath = str_replace(
                "{" . "courseId" . "}",
                $this->apiClient->getSerializer()->toPathValue($course_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($input)) {
            $_tempBody = $input;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BlackboardRest\Model\Content',
                'courses/{courseId}/contents'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BlackboardRest\Model\Content', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BlackboardRest\Model\Content', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BlackboardRest\Model\RestException', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BlackboardRest\Model\RestException', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
