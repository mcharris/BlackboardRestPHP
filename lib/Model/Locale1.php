<?php
/**
 * Locale1
 *
 * PHP version 5
 *
 * @category Class
 * @package  BlackboardRest
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Learn APIs
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3200.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BlackboardRest\Model;

use \ArrayAccess;

/**
 * Locale1 Class Doc Comment
 *
 * @category    Class
 * @description The user&#39;s localization settings.
 * @package     BlackboardRest
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Locale1 implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Locale_1';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'calendar' => 'string',
        'first_day_of_week' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'calendar' => 'calendar',
        'first_day_of_week' => 'firstDayOfWeek'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'calendar' => 'setCalendar',
        'first_day_of_week' => 'setFirstDayOfWeek'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'calendar' => 'getCalendar',
        'first_day_of_week' => 'getFirstDayOfWeek'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const CALENDAR_GREGORIAN = 'Gregorian';
    const CALENDAR_GREGORIAN_HIJRI = 'GregorianHijri';
    const CALENDAR_HIJRI = 'Hijri';
    const CALENDAR_HIJRI_GREGORIAN = 'HijriGregorian';
    const FIRST_DAY_OF_WEEK_SUNDAY = 'Sunday';
    const FIRST_DAY_OF_WEEK_MONDAY = 'Monday';
    const FIRST_DAY_OF_WEEK_SATURDAY = 'Saturday';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getCalendarAllowableValues()
    {
        return [
            self::CALENDAR_GREGORIAN,
            self::CALENDAR_GREGORIAN_HIJRI,
            self::CALENDAR_HIJRI,
            self::CALENDAR_HIJRI_GREGORIAN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getFirstDayOfWeekAllowableValues()
    {
        return [
            self::FIRST_DAY_OF_WEEK_SUNDAY,
            self::FIRST_DAY_OF_WEEK_MONDAY,
            self::FIRST_DAY_OF_WEEK_SATURDAY,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['calendar'] = isset($data['calendar']) ? $data['calendar'] : null;
        $this->container['first_day_of_week'] = isset($data['first_day_of_week']) ? $data['first_day_of_week'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = ["Gregorian", "GregorianHijri", "Hijri", "HijriGregorian"];
        if (!in_array($this->container['calendar'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'calendar', must be one of 'Gregorian', 'GregorianHijri', 'Hijri', 'HijriGregorian'.";
        }

        $allowed_values = ["Sunday", "Monday", "Saturday"];
        if (!in_array($this->container['first_day_of_week'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'first_day_of_week', must be one of 'Sunday', 'Monday', 'Saturday'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = ["Gregorian", "GregorianHijri", "Hijri", "HijriGregorian"];
        if (!in_array($this->container['calendar'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["Sunday", "Monday", "Saturday"];
        if (!in_array($this->container['first_day_of_week'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id The locale specified by the user.  This locale will be used anywhere the user is allowed to customize their locale; courses may force a specific locale, overriding the user's locale preference.
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets calendar
     * @return string
     */
    public function getCalendar()
    {
        return $this->container['calendar'];
    }

    /**
     * Sets calendar
     * @param string $calendar The calendar type specified by the user.
     * @return $this
     */
    public function setCalendar($calendar)
    {
        $allowed_values = array('Gregorian', 'GregorianHijri', 'Hijri', 'HijriGregorian');
        if (!is_null($calendar) && (!in_array($calendar, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'calendar', must be one of 'Gregorian', 'GregorianHijri', 'Hijri', 'HijriGregorian'");
        }
        $this->container['calendar'] = $calendar;

        return $this;
    }

    /**
     * Gets first_day_of_week
     * @return string
     */
    public function getFirstDayOfWeek()
    {
        return $this->container['first_day_of_week'];
    }

    /**
     * Sets first_day_of_week
     * @param string $first_day_of_week The user's preferred first day of the week.
     * @return $this
     */
    public function setFirstDayOfWeek($first_day_of_week)
    {
        $allowed_values = array('Sunday', 'Monday', 'Saturday');
        if (!is_null($first_day_of_week) && (!in_array($first_day_of_week, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'first_day_of_week', must be one of 'Sunday', 'Monday', 'Saturday'");
        }
        $this->container['first_day_of_week'] = $first_day_of_week;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\BlackboardRest\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\BlackboardRest\ObjectSerializer::sanitizeForSerialization($this));
    }
}


