<?php
/**
 * Course
 *
 * PHP version 5
 *
 * @category Class
 * @package  BlackboardRest
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Learn APIs
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3200.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BlackboardRest\Model;

use \ArrayAccess;

/**
 * Course Class Doc Comment
 *
 * @category    Class
 * @package     BlackboardRest
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Course implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Course';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'uuid' => 'string',
        'external_id' => 'string',
        'data_source_id' => 'string',
        'course_id' => 'string',
        'name' => 'string',
        'description' => 'string',
        'created' => '\DateTime',
        'organization' => 'bool',
        'ultra_status' => 'string',
        'allow_guests' => 'bool',
        'read_only' => 'bool',
        'term_id' => 'string',
        'availability' => '\BlackboardRest\Model\Availability1',
        'enrollment' => '\BlackboardRest\Model\Enrollment',
        'locale' => '\BlackboardRest\Model\Locale',
        'has_children' => 'bool',
        'parent_id' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'uuid' => 'uuid',
        'external_id' => 'externalId',
        'data_source_id' => 'dataSourceId',
        'course_id' => 'courseId',
        'name' => 'name',
        'description' => 'description',
        'created' => 'created',
        'organization' => 'organization',
        'ultra_status' => 'ultraStatus',
        'allow_guests' => 'allowGuests',
        'read_only' => 'readOnly',
        'term_id' => 'termId',
        'availability' => 'availability',
        'enrollment' => 'enrollment',
        'locale' => 'locale',
        'has_children' => 'hasChildren',
        'parent_id' => 'parentId'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'uuid' => 'setUuid',
        'external_id' => 'setExternalId',
        'data_source_id' => 'setDataSourceId',
        'course_id' => 'setCourseId',
        'name' => 'setName',
        'description' => 'setDescription',
        'created' => 'setCreated',
        'organization' => 'setOrganization',
        'ultra_status' => 'setUltraStatus',
        'allow_guests' => 'setAllowGuests',
        'read_only' => 'setReadOnly',
        'term_id' => 'setTermId',
        'availability' => 'setAvailability',
        'enrollment' => 'setEnrollment',
        'locale' => 'setLocale',
        'has_children' => 'setHasChildren',
        'parent_id' => 'setParentId'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'uuid' => 'getUuid',
        'external_id' => 'getExternalId',
        'data_source_id' => 'getDataSourceId',
        'course_id' => 'getCourseId',
        'name' => 'getName',
        'description' => 'getDescription',
        'created' => 'getCreated',
        'organization' => 'getOrganization',
        'ultra_status' => 'getUltraStatus',
        'allow_guests' => 'getAllowGuests',
        'read_only' => 'getReadOnly',
        'term_id' => 'getTermId',
        'availability' => 'getAvailability',
        'enrollment' => 'getEnrollment',
        'locale' => 'getLocale',
        'has_children' => 'getHasChildren',
        'parent_id' => 'getParentId'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const ULTRA_STATUS_UNDECIDED = 'Undecided';
    const ULTRA_STATUS_CLASSIC = 'Classic';
    const ULTRA_STATUS_ULTRA = 'Ultra';
    const ULTRA_STATUS_ULTRA_PREVIEW = 'UltraPreview';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getUltraStatusAllowableValues()
    {
        return [
            self::ULTRA_STATUS_UNDECIDED,
            self::ULTRA_STATUS_CLASSIC,
            self::ULTRA_STATUS_ULTRA,
            self::ULTRA_STATUS_ULTRA_PREVIEW,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['uuid'] = isset($data['uuid']) ? $data['uuid'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['data_source_id'] = isset($data['data_source_id']) ? $data['data_source_id'] : null;
        $this->container['course_id'] = isset($data['course_id']) ? $data['course_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['organization'] = isset($data['organization']) ? $data['organization'] : null;
        $this->container['ultra_status'] = isset($data['ultra_status']) ? $data['ultra_status'] : null;
        $this->container['allow_guests'] = isset($data['allow_guests']) ? $data['allow_guests'] : null;
        $this->container['read_only'] = isset($data['read_only']) ? $data['read_only'] : null;
        $this->container['term_id'] = isset($data['term_id']) ? $data['term_id'] : null;
        $this->container['availability'] = isset($data['availability']) ? $data['availability'] : null;
        $this->container['enrollment'] = isset($data['enrollment']) ? $data['enrollment'] : null;
        $this->container['locale'] = isset($data['locale']) ? $data['locale'] : null;
        $this->container['has_children'] = isset($data['has_children']) ? $data['has_children'] : null;
        $this->container['parent_id'] = isset($data['parent_id']) ? $data['parent_id'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['id'] === null) {
            $invalid_properties[] = "'id' can't be null";
        }
        if ($this->container['uuid'] === null) {
            $invalid_properties[] = "'uuid' can't be null";
        }
        if ($this->container['course_id'] === null) {
            $invalid_properties[] = "'course_id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ($this->container['created'] === null) {
            $invalid_properties[] = "'created' can't be null";
        }
        if ($this->container['organization'] === null) {
            $invalid_properties[] = "'organization' can't be null";
        }
        $allowed_values = ["Undecided", "Classic", "Ultra", "UltraPreview"];
        if (!in_array($this->container['ultra_status'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'ultra_status', must be one of 'Undecided', 'Classic', 'Ultra', 'UltraPreview'.";
        }

        if ($this->container['has_children'] === null) {
            $invalid_properties[] = "'has_children' can't be null";
        }
        if ($this->container['parent_id'] === null) {
            $invalid_properties[] = "'parent_id' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['uuid'] === null) {
            return false;
        }
        if ($this->container['course_id'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['created'] === null) {
            return false;
        }
        if ($this->container['organization'] === null) {
            return false;
        }
        $allowed_values = ["Undecided", "Classic", "Ultra", "UltraPreview"];
        if (!in_array($this->container['ultra_status'], $allowed_values)) {
            return false;
        }
        if ($this->container['has_children'] === null) {
            return false;
        }
        if ($this->container['parent_id'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id The primary ID of the course.
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets uuid
     * @return string
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     * @param string $uuid A secondary unique ID for the course.  Used by LTI launches and other inter-server operations.
     * @return $this
     */
    public function setUuid($uuid)
    {
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets external_id
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     * @param string $external_id An optional externally-defined unique ID for the course.  Defaults to the courseId.  Formerly known as 'batchUid'.
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets data_source_id
     * @return string
     */
    public function getDataSourceId()
    {
        return $this->container['data_source_id'];
    }

    /**
     * Sets data_source_id
     * @param string $data_source_id The ID of the data source associated with this course.  This may optionally be the data source's externalId using the syntax \"externalId:math101\".
     * @return $this
     */
    public function setDataSourceId($data_source_id)
    {
        $this->container['data_source_id'] = $data_source_id;

        return $this;
    }

    /**
     * Gets course_id
     * @return string
     */
    public function getCourseId()
    {
        return $this->container['course_id'];
    }

    /**
     * Sets course_id
     * @param string $course_id The Course ID attribute, shown to users in the UI.
     * @return $this
     */
    public function setCourseId($course_id)
    {
        $this->container['course_id'] = $course_id;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name The name of the course.
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description The description of the course.
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets created
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     * @param \DateTime $created The date this course was created.
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets organization
     * @return bool
     */
    public function getOrganization()
    {
        return $this->container['organization'];
    }

    /**
     * Sets organization
     * @param bool $organization Whether this object represents an Organization.  Defaults to false.
     * @return $this
     */
    public function setOrganization($organization)
    {
        $this->container['organization'] = $organization;

        return $this;
    }

    /**
     * Gets ultra_status
     * @return string
     */
    public function getUltraStatus()
    {
        return $this->container['ultra_status'];
    }

    /**
     * Sets ultra_status
     * @param string $ultra_status Whether the course is rendered using Classic or Ultra Course View.
     * @return $this
     */
    public function setUltraStatus($ultra_status)
    {
        $allowed_values = array('Undecided', 'Classic', 'Ultra', 'UltraPreview');
        if (!is_null($ultra_status) && (!in_array($ultra_status, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'ultra_status', must be one of 'Undecided', 'Classic', 'Ultra', 'UltraPreview'");
        }
        $this->container['ultra_status'] = $ultra_status;

        return $this;
    }

    /**
     * Gets allow_guests
     * @return bool
     */
    public function getAllowGuests()
    {
        return $this->container['allow_guests'];
    }

    /**
     * Sets allow_guests
     * @param bool $allow_guests Whether guests (users with the role guest) are allowed access to the course.  Defaults to true.
     * @return $this
     */
    public function setAllowGuests($allow_guests)
    {
        $this->container['allow_guests'] = $allow_guests;

        return $this;
    }

    /**
     * Gets read_only
     * @return bool
     */
    public function getReadOnly()
    {
        return $this->container['read_only'];
    }

    /**
     * Sets read_only
     * @param bool $read_only Whether the course is closed to any further changes. This status does not affect availability of the course for viewing in any way, just updates. readOnly is only valid in an Ultra course; Classic courses can not be closed.
     * @return $this
     */
    public function setReadOnly($read_only)
    {
        $this->container['read_only'] = $read_only;

        return $this;
    }

    /**
     * Gets term_id
     * @return string
     */
    public function getTermId()
    {
        return $this->container['term_id'];
    }

    /**
     * Sets term_id
     * @param string $term_id The ID of the term associated to this course.  This may optionally be the term's externalId using the syntax \"externalId:spring.2016\".
     * @return $this
     */
    public function setTermId($term_id)
    {
        $this->container['term_id'] = $term_id;

        return $this;
    }

    /**
     * Gets availability
     * @return \BlackboardRest\Model\Availability1
     */
    public function getAvailability()
    {
        return $this->container['availability'];
    }

    /**
     * Sets availability
     * @param \BlackboardRest\Model\Availability1 $availability
     * @return $this
     */
    public function setAvailability($availability)
    {
        $this->container['availability'] = $availability;

        return $this;
    }

    /**
     * Gets enrollment
     * @return \BlackboardRest\Model\Enrollment
     */
    public function getEnrollment()
    {
        return $this->container['enrollment'];
    }

    /**
     * Sets enrollment
     * @param \BlackboardRest\Model\Enrollment $enrollment
     * @return $this
     */
    public function setEnrollment($enrollment)
    {
        $this->container['enrollment'] = $enrollment;

        return $this;
    }

    /**
     * Gets locale
     * @return \BlackboardRest\Model\Locale
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     * @param \BlackboardRest\Model\Locale $locale
     * @return $this
     */
    public function setLocale($locale)
    {
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets has_children
     * @return bool
     */
    public function getHasChildren()
    {
        return $this->container['has_children'];
    }

    /**
     * Sets has_children
     * @param bool $has_children Whether the course has any cross-listed children.  **Since**: 3000.11.0
     * @return $this
     */
    public function setHasChildren($has_children)
    {
        $this->container['has_children'] = $has_children;

        return $this;
    }

    /**
     * Gets parent_id
     * @return string
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     * @param string $parent_id The cross-listed parentId associated with the course, if the course is a child course.  **Since**: 3000.11.0
     * @return $this
     */
    public function setParentId($parent_id)
    {
        $this->container['parent_id'] = $parent_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\BlackboardRest\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\BlackboardRest\ObjectSerializer::sanitizeForSerialization($this));
    }
}


