<?php
/**
 * Grading
 *
 * PHP version 5
 *
 * @category Class
 * @package  BlackboardRest
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Learn APIs
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3200.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BlackboardRest\Model;

use \ArrayAccess;

/**
 * Grading Class Doc Comment
 *
 * @category    Class
 * @description Settings controlling whether numerical and text grade values for this grade column are calculated, determined based on attempts, or manually entered.
 * @package     BlackboardRest
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Grading implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Grading';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'type' => 'string',
        'due' => '\DateTime',
        'attempts_allowed' => 'int',
        'scoring_model' => 'string',
        'anonymous_grading' => '\BlackboardRest\Model\AnonymousGrading'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'due' => 'due',
        'attempts_allowed' => 'attemptsAllowed',
        'scoring_model' => 'scoringModel',
        'anonymous_grading' => 'anonymousGrading'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'due' => 'setDue',
        'attempts_allowed' => 'setAttemptsAllowed',
        'scoring_model' => 'setScoringModel',
        'anonymous_grading' => 'setAnonymousGrading'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'due' => 'getDue',
        'attempts_allowed' => 'getAttemptsAllowed',
        'scoring_model' => 'getScoringModel',
        'anonymous_grading' => 'getAnonymousGrading'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const TYPE_ATTEMPTS = 'Attempts';
    const TYPE_CALCULATED = 'Calculated';
    const TYPE_MANUAL = 'Manual';
    const SCORING_MODEL_LAST = 'Last';
    const SCORING_MODEL_HIGHEST = 'Highest';
    const SCORING_MODEL_LOWEST = 'Lowest';
    const SCORING_MODEL_FIRST = 'First';
    const SCORING_MODEL_AVERAGE = 'Average';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_ATTEMPTS,
            self::TYPE_CALCULATED,
            self::TYPE_MANUAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getScoringModelAllowableValues()
    {
        return [
            self::SCORING_MODEL_LAST,
            self::SCORING_MODEL_HIGHEST,
            self::SCORING_MODEL_LOWEST,
            self::SCORING_MODEL_FIRST,
            self::SCORING_MODEL_AVERAGE,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['due'] = isset($data['due']) ? $data['due'] : null;
        $this->container['attempts_allowed'] = isset($data['attempts_allowed']) ? $data['attempts_allowed'] : null;
        $this->container['scoring_model'] = isset($data['scoring_model']) ? $data['scoring_model'] : null;
        $this->container['anonymous_grading'] = isset($data['anonymous_grading']) ? $data['anonymous_grading'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['type'] === null) {
            $invalid_properties[] = "'type' can't be null";
        }
        $allowed_values = ["Attempts", "Calculated", "Manual"];
        if (!in_array($this->container['type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'type', must be one of 'Attempts', 'Calculated', 'Manual'.";
        }

        $allowed_values = ["Last", "Highest", "Lowest", "First", "Average"];
        if (!in_array($this->container['scoring_model'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'scoring_model', must be one of 'Last', 'Highest', 'Lowest', 'First', 'Average'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['type'] === null) {
            return false;
        }
        $allowed_values = ["Attempts", "Calculated", "Manual"];
        if (!in_array($this->container['type'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["Last", "Highest", "Lowest", "First", "Average"];
        if (!in_array($this->container['scoring_model'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type The type of Grading settings for this Grade Column; Manual, Calculated, or Attempts based.
     * @return $this
     */
    public function setType($type)
    {
        $allowed_values = array('Attempts', 'Calculated', 'Manual');
        if ((!in_array($type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'type', must be one of 'Attempts', 'Calculated', 'Manual'");
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets due
     * @return \DateTime
     */
    public function getDue()
    {
        return $this->container['due'];
    }

    /**
     * Sets due
     * @param \DateTime $due The date on which attempts are due for the grade column.
     * @return $this
     */
    public function setDue($due)
    {
        $this->container['due'] = $due;

        return $this;
    }

    /**
     * Gets attempts_allowed
     * @return int
     */
    public function getAttemptsAllowed()
    {
        return $this->container['attempts_allowed'];
    }

    /**
     * Sets attempts_allowed
     * @param int $attempts_allowed Number of attempts allowed for the grade column.
     * @return $this
     */
    public function setAttemptsAllowed($attempts_allowed)
    {
        $this->container['attempts_allowed'] = $attempts_allowed;

        return $this;
    }

    /**
     * Gets scoring_model
     * @return string
     */
    public function getScoringModel()
    {
        return $this->container['scoring_model'];
    }

    /**
     * Sets scoring_model
     * @param string $scoring_model The scoring model for the submitted grade column attempts.
     * @return $this
     */
    public function setScoringModel($scoring_model)
    {
        $allowed_values = array('Last', 'Highest', 'Lowest', 'First', 'Average');
        if (!is_null($scoring_model) && (!in_array($scoring_model, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'scoring_model', must be one of 'Last', 'Highest', 'Lowest', 'First', 'Average'");
        }
        $this->container['scoring_model'] = $scoring_model;

        return $this;
    }

    /**
     * Gets anonymous_grading
     * @return \BlackboardRest\Model\AnonymousGrading
     */
    public function getAnonymousGrading()
    {
        return $this->container['anonymous_grading'];
    }

    /**
     * Sets anonymous_grading
     * @param \BlackboardRest\Model\AnonymousGrading $anonymous_grading
     * @return $this
     */
    public function setAnonymousGrading($anonymous_grading)
    {
        $this->container['anonymous_grading'] = $anonymous_grading;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\BlackboardRest\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\BlackboardRest\ObjectSerializer::sanitizeForSerialization($this));
    }
}


