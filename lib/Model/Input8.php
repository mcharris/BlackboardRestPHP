<?php
/**
 * Input8
 *
 * PHP version 5
 *
 * @category Class
 * @package  BlackboardRest
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Learn APIs
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3200.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BlackboardRest\Model;

use \ArrayAccess;

/**
 * Input8 Class Doc Comment
 *
 * @category    Class
 * @package     BlackboardRest
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Input8 implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'input_8';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'data_source_id' => 'string',
        'availability' => '\BlackboardRest\Model\Availability3',
        'course_role_id' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'data_source_id' => 'dataSourceId',
        'availability' => 'availability',
        'course_role_id' => 'courseRoleId'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'data_source_id' => 'setDataSourceId',
        'availability' => 'setAvailability',
        'course_role_id' => 'setCourseRoleId'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'data_source_id' => 'getDataSourceId',
        'availability' => 'getAvailability',
        'course_role_id' => 'getCourseRoleId'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const COURSE_ROLE_ID_INSTRUCTOR = 'Instructor';
    const COURSE_ROLE_ID_TEACHING_ASSISTANT = 'TeachingAssistant';
    const COURSE_ROLE_ID_COURSE_BUILDER = 'CourseBuilder';
    const COURSE_ROLE_ID_GRADER = 'Grader';
    const COURSE_ROLE_ID_STUDENT = 'Student';
    const COURSE_ROLE_ID_GUEST = 'Guest';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getCourseRoleIdAllowableValues()
    {
        return [
            self::COURSE_ROLE_ID_INSTRUCTOR,
            self::COURSE_ROLE_ID_TEACHING_ASSISTANT,
            self::COURSE_ROLE_ID_COURSE_BUILDER,
            self::COURSE_ROLE_ID_GRADER,
            self::COURSE_ROLE_ID_STUDENT,
            self::COURSE_ROLE_ID_GUEST,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['data_source_id'] = isset($data['data_source_id']) ? $data['data_source_id'] : null;
        $this->container['availability'] = isset($data['availability']) ? $data['availability'] : null;
        $this->container['course_role_id'] = isset($data['course_role_id']) ? $data['course_role_id'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = ["Instructor", "TeachingAssistant", "CourseBuilder", "Grader", "Student", "Guest"];
        if (!in_array($this->container['course_role_id'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'course_role_id', must be one of 'Instructor', 'TeachingAssistant', 'CourseBuilder', 'Grader', 'Student', 'Guest'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = ["Instructor", "TeachingAssistant", "CourseBuilder", "Grader", "Student", "Guest"];
        if (!in_array($this->container['course_role_id'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets data_source_id
     * @return string
     */
    public function getDataSourceId()
    {
        return $this->container['data_source_id'];
    }

    /**
     * Sets data_source_id
     * @param string $data_source_id The ID of the data source associated with this course.  This may optionally be the data source's externalId using the syntax \"externalId:math101\".
     * @return $this
     */
    public function setDataSourceId($data_source_id)
    {
        $this->container['data_source_id'] = $data_source_id;

        return $this;
    }

    /**
     * Gets availability
     * @return \BlackboardRest\Model\Availability3
     */
    public function getAvailability()
    {
        return $this->container['availability'];
    }

    /**
     * Sets availability
     * @param \BlackboardRest\Model\Availability3 $availability
     * @return $this
     */
    public function setAvailability($availability)
    {
        $this->container['availability'] = $availability;

        return $this;
    }

    /**
     * Gets course_role_id
     * @return string
     */
    public function getCourseRoleId()
    {
        return $this->container['course_role_id'];
    }

    /**
     * Sets course_role_id
     * @param string $course_role_id The user's role in the course.  Learn provides the following immutable course roles:  - Student: Has no access to the Control Panel.  This is the default role. - Guest: Has no access to the Control Panel. Areas within the course are made available to guests, but typically they can only view course materials; they do not have access to tests or assessments, and do not have permission to post on discussion boards. Out of the box, Learn also comes with the following roles, although they are customizable and may have different capabilities from what is documented here:  - Instructor: Has access to all areas in the Control Panel. This role is generally given to those developing, teaching, or facilitating the class. Instructors may access a course that is unavailable to students. - TeachingAssistant: The teaching assistant role is that of a co-teacher. Teaching assistants are able to administer all areas of a course. Their only limitations are those imposed by the instructor or Blackboard administrator at your school. - CourseBuilder: Manages the course without having access to student grades. - Grader: Assists the instructor in the creation, management, delivery, and grading of items. These roles are also valid for an organization, although they are named differently in the UI.  Custom course roles may also be referenced by their IDs.
     * @return $this
     */
    public function setCourseRoleId($course_role_id)
    {
        $allowed_values = array('Instructor', 'TeachingAssistant', 'CourseBuilder', 'Grader', 'Student', 'Guest');
        if (!is_null($course_role_id) && (!in_array($course_role_id, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'course_role_id', must be one of 'Instructor', 'TeachingAssistant', 'CourseBuilder', 'Grader', 'Student', 'Guest'");
        }
        $this->container['course_role_id'] = $course_role_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\BlackboardRest\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\BlackboardRest\ObjectSerializer::sanitizeForSerialization($this));
    }
}


